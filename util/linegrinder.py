#!/usr/bin/env python
# ----------------------------------------------------------------------------
# 21-Jul-2015 ShaneG
#
# Some linegrinder specific filters.
# ----------------------------------------------------------------------------
from os.path import abspath, isfile
from subprocess import Popen, PIPE

# File name suffix (as generated by linegrinder)
SUFFIX = (
    "_ISOLATION_GCODE.ngc",
    "_DRILL_GCODE.ngc",
    "_EDGEMILL_GCODE.ngc",
)

# Drill code prefix lines
DRILL_PREFIX = (
    "G20 (Use Inches)",
    "G90 (Set Absolute Coordinates)",
    "G17 (XY plane selection)",
    "G00 Z0.25",
    "G00 X0 Y0",
    "M03 (Start spindle)",
    "G04 P1 (Pause to let the spindle start)",
)

DRILL_SUFFIX = (
    "M05 (Stop spindle)",
    "M02 (Program End)",
)


def runTool(tool, args, data, stderr=False):
    """ Run a tool with the given args and input data.
    """
    cmdline = "%s %s" % (tool, args)
    #  print "Running command:\n  %s" % cmdline
    prog = Popen(cmdline, stdin=PIPE, stdout=PIPE, stderr=PIPE, shell=True)
    out, err = prog.communicate("".join(data))
    if stderr and (len(err) > 0):
        print(err)
    # Turn the output into a list of lines, strip blanks and 'Program Stop' (M02)
    lines = list()
    for line in out.split('\n'):
        line = line.strip()
        if (len(line) > 0) and (not line.startswith("M02")):
            lines.append(line + "\n")
    # Done
    return lines


def checkFiles(name):
    """ Given a base name, verify that all files exist
    """
    for s in SUFFIX:
        fullname = abspath(name + s)
        if not isfile(fullname):
            return False
    return True


def getCodeFile(name, filetype):
    """ Get the full name for a file
    """
    return abspath(name + SUFFIX[filetype])


def getBoardSize(name):
    # Determine the size of the board (using the edge mill)
    min_x = 1000
    max_x = -1000
    min_y = 1000
    max_y = -1000
    units = 1.0  # 1 = mm, 25.4 = inch
    edge = open(getCodeFile(name, 2), "r")
    for line in edge:
        line = line.strip()
        if (len(line) > 1) and (line[0] == 'G'):
            parts = [part.strip() for part in line.split(' ')]
            # Setting units ?
            if parts[0] == "G20":
                units = 25.4
            elif parts[0] == "G21":
                units = 1.00
            elif parts[0][0] == 'G':
                # Look for X/Y components
                for part in parts:
                    if len(part) > 0:
                        if part[0] == 'X':
                            val = units * float(part[1:])
                            min_x = min(min_x, val)
                            max_x = max(max_x, val)
                        elif part[0] == 'Y':
                            val = units * float(part[1:])
                            min_y = min(min_y, val)
                            max_y = max(max_y, val)
    return (min_x, min_y, max_x - min_x, max_y - min_y)


def generateDrillFile(name):
    """ Generate the drill file from the pad touch downs in the isolation
        routing file.
    """
    data = None
    with open(getCodeFile(name, 0), "r") as f:
        data = f.readlines()
    inpads = False
    points = list()
    for line in data:
        line = line.strip()
        if line == "(... pad touchdown start ...)":
            inpads = True
        elif line == "(... pad touchdown end ...)":
            inpads = False
        elif inpads and line.startswith("G00 X"):
            parts = [part.strip() for part in line.split(' ')]
            x = None
            y = None
            for p in parts:
                if p[0] == 'X':
                    x = p[1:]
                elif p[0] == 'Y':
                    y = p[1:]
            if (x is not None) and (y is not None):
                points.append((x, y))
    # Now generate the drill code
    if len(points) == 0:
        return None
    data = list(DRILL_PREFIX)
    for p in points:
        data.append("G00 X%s Y%s" % p)
        data.append("G01 Z-0.118 F5")  # TODO: Should allow drill depth to be set
        data.append("G00 Z0.25")  # TODO: Same for safe distance
    data.extend(DRILL_SUFFIX)
    return list([line + "\n" for line in data])
